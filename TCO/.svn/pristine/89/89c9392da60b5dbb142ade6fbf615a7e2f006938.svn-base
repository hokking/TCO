package kr.or.tco.strgstck.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.tco.ordr.service.OrdrService;
import kr.or.tco.ordr.vo.OrdrVO;
import kr.or.tco.strgstck.service.StrgstckService;
import kr.or.tco.strgstck.vo.StrgstckVO;

@RequestMapping("/strgstck")
@Controller
public class StrgstckController {
	private static final Logger logger = LoggerFactory.getLogger(StrgstckController.class);
	
	@Autowired
	StrgstckService strgstckService;
	
	@Autowired
	OrdrService ordrService;
	
	//수주 목록 뽑기
	@GetMapping("/rcvordr")
	public String rcvordrList(Model model) {
		//수주Y 리스트
		List<OrdrVO> listY = this.ordrService.rcvOrdrYList();
		//수주N 리스트
		List<OrdrVO> listX = this.ordrService.rcvOrdrNList();
		
		//둘 다 model에 담아서 보내기
		model.addAttribute("Y", listY);
		model.addAttribute("N", listX);
		
		return "strgstck/rcvordr";
	}
	
	//지점이 발주한 내역 상세
	@GetMapping("/ordrDetail")
	public String detail(int ordrId, Model model) {
		logger.info("detail ordrId : " + ordrId);
		
		List<OrdrVO> ordrVO = this.ordrService.ordrDetail(ordrId);
		logger.info("ordrVO : " + ordrVO);
		
		//발주지점 이름 가져오기
		String name = this.ordrService.brnofcNm(ordrVO.get(0).getBrncofcId());
		logger.info("발주지점 이름 : " + name);
		
		//주문의 가격 합계 뽑기
		int sum = 0;
		for(OrdrVO ordr : ordrVO) {
			sum += ordr.getOrdrQty() * ordr.getProdInfoPrchsAmt();
		}
		logger.info("금액 합계 : " + sum);
		
		//ordrId 에 들어갈 모든 내역
		model.addAttribute("ordrVO", ordrVO);
		//발주번호만 따로 넘기기
		model.addAttribute("num", ordrId);
		//발주지점 이름 넘기기
		model.addAttribute("name", name);
		//발주일 넘기기
		model.addAttribute("date", ordrVO.get(0).getOrdrDt());
		//금액 합계 넘기기
		model.addAttribute("sum", sum);
		
		return "strgstck/detail";
	}
	
	//수주버튼 눌렀을때
	@ResponseBody
	@PostMapping("/send.do")
	public int send(int ordrId) {
		logger.info("ordrId : " + ordrId);
		
		//메서드에서 처리해야 할 일이 다 되었는지 확인하기 위한 count
		int count = 0;
		
		//ordrId에 맞는 ordr 내역 다 가져오기
		List<OrdrVO> ordrVO = this.ordrService.ordrDetail(ordrId);
		
		//현재고 확인해서 map에 넣기
		Map<String, Object> nowStck = new HashMap<String, Object>();
		for(OrdrVO ordr : ordrVO) {
			nowStck.put(ordr.getProdInfoId(), strgstckService.nowStck(ordr.getProdInfoId()));
		}
		logger.info("현 재고 : " + nowStck.toString());
		
		//본사의 창고 재고 update
		//현재고랑 주문수량이랑 상품아이디를 map에 넣은 후에 update 진행해야함.
		//발주 내역이 여러개이기때문에 for문으로 돌리기. map은 반복문 안에서 초기화
		Map<String, Object> updateMap = null;
		//업데이트된 행 확인용 count
		int updateCount = 0;
		//주문수량이 재고보다 많은지 체크하는 count
		int check = 0;
		for(OrdrVO ordr : ordrVO) {
			updateMap = new HashMap<String, Object>();
			//상품아이디 넣기
			updateMap.put("prodInfoId", ordr.getProdInfoId());
			//주문수량 넣기
			updateMap.put("ordrQty", ordr.getOrdrQty());
			//map에서 현재고 뽑기
			int stckk = Integer.parseInt( String.valueOf(nowStck.get(ordr.getProdInfoId())));
			//현재고 넣기
			updateMap.put("strgStckQty", stckk);
			
			logger.info("update용 Map : " + updateMap.toString());
			
			//재고 - 주문수량 > 0 인지 확인하기
			if(stckk < ordr.getOrdrQty()) {
				check++;
			}
			
			int updateResult = this.strgstckService.stckUpdate(updateMap);
			
			if(updateResult > 0) {
				updateCount++;
			}
		}
		if(check > 0) {
			return 100;
		}
		if(ordrVO.size() == updateCount) {
			logger.info("모든 내역 update 성공");
			count++;
		}else {
			logger.info("실패한 내역 있음");
			return 10;
		}
		
		//본사의 창고 출고 insert
		//창고 출고 테이블에 사용할 map 만들기. 초기화는 for문 안에서
		Map<String, Object> insertMap = null;
		//insert 결과 확인용 count
		int insertCount = 0;
		for(OrdrVO ordr : ordrVO) {
			insertMap = new HashMap<String, Object>();
			//상품아이디 넣기
			insertMap.put("prodInfoId", ordr.getProdInfoId());
			//주문수량(출고수량) 넣기
			insertMap.put("strgShmtQty", ordr.getOrdrQty());
			//발주한 지점 아이디 넣기
			insertMap.put("brncofcId", ordr.getBrncofcId());
			
			logger.info("insert용 Map : " + insertMap.toString());
			
			int insertResult = this.strgstckService.shipStrg(insertMap);
			
			if(insertResult > 0) {
				insertCount++;
			}
		}
		if(ordrVO.size() == insertCount) {
			logger.info("모든 내역 insert 성공");
			count++;
		}else {
			logger.info("실패한 내역 있음");
			return 20;
		}
		
		//ordrId에 따라 수주여부 전부 Y로 바꾸기
		int Yresult = this.ordrService.rcvNtoY(ordrId);
		if(ordrVO.size() == Yresult) {
			count++;
		}else {
			return 30;
		}
		return count;
	}
	
	//본사의 창고 출고 목록 뽑기
	@GetMapping("/headShipList")
	public String shipList(Model model) {
		List<StrgstckVO> list = this.strgstckService.headShipList();
		
		for(StrgstckVO strg : list) {
			String subDate = strg.getStrgShmtDt().substring(0, 10);
			strg.setStrgShmtDt(subDate);
		}
		
		logger.info("출고수량 : " + list.get(0).getStrgShmtQty());
		model.addAttribute("list", list);
		
		return "strgstck/headShipList";
	}
}