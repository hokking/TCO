package kr.or.tco.cust.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.ObjectError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import kr.or.tco.ArticlePage;
import kr.or.tco.cust.service.CustService;
import kr.or.tco.cust.vo.CustVO;

@RequestMapping("/cust")
@Controller
public class CustController {
	
	@Autowired
	CustService custService;
	
	private static final Logger logger = 
			LoggerFactory.getLogger(CustController.class);
	
	
	@GetMapping("/custinsert")
	public String getCustInsert(Model model) {
		CustVO custVO = new CustVO();
		model.addAttribute("custVO", custVO);
//		logger.info("custVO11111111 : " + custVO.toString());
		
		return "cust/custinsert";
	}
	
	
	@PostMapping("/custinsert")
	public String postCustInsert(@Validated CustVO custVO,
			BindingResult result) {
		//validation 문제가 발생된다면
		
		if(result.hasErrors()) {
			List<ObjectError> allErrors = result.getAllErrors();
			List<ObjectError> globalErrors = result.getGlobalErrors();
//			List<FieldError> fieldErrors = result.getFieldErrors();
			//validation 중에 어떤 오류가 나왔는지 확인..
			for(int i=0;i<allErrors.size();i++) {
				ObjectError objectError = allErrors.get(i);
				logger.info("objectError : " + objectError);
			}
			
			for(ObjectError objectError : globalErrors) {
				logger.info("objectError : " + objectError);
			}
			
//			for(FieldError fieldError : fieldErrors) {
//				logger.info("fieldError : " + fieldError.getDefaultMessage());
//			}
			// redirect(x) => 데이터를 보낼 수 없음
			// forwarding(o)
			//문제가 발생되면 수정프로세스는 중단되고 forward
			return "cust/custinsert";
		}//end if
		
		
		logger.info("custVO2222222 : " + custVO.toString());
		if(custVO.getCustMktRcptnAgreYn() == null) {
			custVO.setCustMktRcptnAgreYn("N");
		}
		
		//수정 비즈니스 로직 처리 후 -> 몇 건이 update되었나..
		int insertCustRslt = custService.custInsert(custVO);
		
		if(!(insertCustRslt > 0)) {//수정 실패
			return "cust/custinsert";
		}
		
		//상세페이지로 되돌아감
		return "redirect:/cust/custlist";
	}
	
	
	@GetMapping("/custlist")
	public String getCustList(Model model
			, @RequestParam(defaultValue = "1", required = false) int currentPage
			, @RequestParam(defaultValue = "7", required = false) int size
			, @RequestParam(required = false) String keyWord) {
		
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("keyWord", keyWord);
		map.put("size", size);
		map.put("currentPage", currentPage);
		
		// 고객 전체 인원수
		int total = this.custService.getCustTotal(map);
		
		// 일반 고객 목록
		List<CustVO> list = this.custService.custSelect(map);
		List<CustVO> list1 = this.custService.custSelectH(map);
		List<CustVO> list2 = this.custService.custSelectT(map);
		model.addAttribute("list", new ArticlePage(total, currentPage, size, 5, list));
		model.addAttribute("list1", new ArticlePage(total, currentPage, size, 5, list1));
		model.addAttribute("list2", new ArticlePage(total, currentPage, size, 5, list2));
		model.addAttribute("total", total);
		
		return "cust/custlist";
	}
	
	@GetMapping("/custdetail/{custId}")
	public String getCustDetail(Model model, @PathVariable("custId") String custId) {
		logger.info("custId : " + custId);
		
		CustVO custVO = this.custService.custDetailSelect(custId);
		String brdt = custVO.getCustBrdt().substring(0, 10);
		custVO.setCustBrdt(brdt);
		if(custVO != null) {
			logger.info("custVO!!!!!!!!!!!!!!!!! : " + custVO.toString());
			logger.info("custVO : " + custVO.getCustBrdt());
		}
		
		model.addAttribute("custVO", custVO);
		
		
		return "cust/custdetail";
	}
	
	@ResponseBody
	@PostMapping("/custupdate")
	public int postCustUpdate(@RequestParam String custId,
			@ModelAttribute CustVO custVO, BindingResult result) {
		
		logger.info("custVO???????????? : " + custVO.toString());
		logger.info("result.hasErrors() : " + result.hasErrors());
		custVO.setCustId(custId);
		
		logger.info("custVO2222222 : " + custVO.toString());
		if(custVO.getCustMktRcptnAgreYn() == null) {
			custVO.setCustMktRcptnAgreYn("N");
		}
		
		int updateResult = this.custService.custDetailUpdate(custVO);
		
		return updateResult;
	}
	
	@ResponseBody
	@PostMapping("/custdelete")
	public int postCustDelete(Model model
			, @RequestParam String custId) {
		logger.info("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
		model.addAttribute("custId", custId);
		
		int deleteResult = this.custService.custDeleteUpdate(custId);

		return deleteResult;
	}
	
	@ResponseBody
	@PostMapping("/custfilter")
	public List<CustVO> postCustFilter(Model model
			, @RequestParam(required = false) String keyWord
			, @RequestParam(value = "age[]", required = false) List<String> age
			, @RequestParam(value = "gender[]", required = false) List<String> gender
			, @RequestParam(value = "rank[]", required = false) List<String> rank
			, @RequestParam(value = "mrg[]", required = false) List<String> mrg
			) {
//		String[] age = request.getParameterValues("age");
//		String[] gender = request.getParameterValues("gender");
		
//		if(!age.isEmpty()) {
//			for(String s : age) {
//				logger.info("age!!!!!!!!!!!!!! : " + s);
//			}
//		} else {
//			logger.info("없음~~~~!!");
//		}
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("ageList", age);
		map.put("genderList", gender);
		map.put("rankList", rank);
		map.put("mrgList", mrg);
		map.put("keyWord", keyWord);
				
		List<CustVO> list = this.custService.custMktSelect(map);
		model.addAttribute("list", list);
		
		return list;
	}

	
	@GetMapping("/custprmt")
	public String getCustPrmt(Model model
			, @RequestParam(required = false) String keyWord) {
		
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("keyWord", keyWord);

		List<CustVO> list = this.custService.custMktSelect(map);
		model.addAttribute("list", list);
		
		return "cust/custprmt";
	}
	
	@GetMapping("/custmail")
	public String getCustMail(Model model
			, @RequestParam(value = "sendCust") List<String> mailList
			, @RequestParam(value = "custId") List<String> custList) {
		for(String s : custList) {
			logger.info("cust~!!!!!!! : " + s);
		}
		List<CustVO> list = new ArrayList<CustVO>();
		for(int i = 0; i < mailList.size(); i++) {
			CustVO custVO = new CustVO();
			custVO.setCustId(custList.get(i));
			custVO.setCustMail(mailList.get(i));
			list.add(custVO);
		}
//		logger.info("list!!!! : " + list.get(0));
//		logger.info("list!!!! : " + list.get(1));
		model.addAttribute("list", list);
		
		return "cust/custmail";
	}
	
	@RequestMapping(value="/custfile", method = RequestMethod.POST) 
	@ResponseBody 
	public void ckUpload(HttpServletRequest req
			, HttpServletResponse res
			, @RequestParam MultipartFile upload) throws Exception { 
		logger.info("ckUpload 진입 =========================================1"); 
		// 랜덤 문자 생성
		UUID uid = UUID.randomUUID(); 
		OutputStream out = null; 
		PrintWriter printWriter = null;
		String uploadFileName = uid.toString() + "-" + upload.getOriginalFilename();
		// 인코딩 
		res.setCharacterEncoding("utf-8"); 
		res.setContentType("text/html;charset=utf-8"); 
		try { 
			String fileName = upload.getOriginalFilename(); 
			// 파일 이름 가져오기 
			byte[] bytes = upload.getBytes(); 
			// 업로드 경로 
			String uploadPath = "C:\\Users\\PC\\eclipse-workspace\\TCO\\src\\main\\webapp\\resources\\upload";
			File ckUploadPath = new File(uploadPath, getFolder());
			out = new FileOutputStream(ckUploadPath); 
			out.write(bytes); 
			out.flush(); 
			// out에 저장된 데이터를 전송하고 초기화 
			String callback = req.getParameter("CKEditorFuncNum"); 
			printWriter = res.getWriter(); 
			String fileUrl = "/resources/upload/" + getFolder() + "/" + uploadFileName; 
			// 작성화면 
			// String fileUrl = "/ckUpload/" + uid + "&fileName=" + fileName; 
			// 작성화면 
			// 업로드시 메시지 출력 
			printWriter.println("<script type='text/javascript'>" + "window.parent.CKEDITOR.tools.callFunction(" + callback+",'"+ fileUrl+"','이미지를 업로드하였습니다.')" +"</script>"); 
			printWriter.flush(); 
		} catch (IOException e) { e.printStackTrace(); } 
		finally { 
			try { if(out != null) { out.close(); } 
				if(printWriter != null) { printWriter.close(); } 
			} catch(IOException e) { e.printStackTrace(); } 
		} 
		
		return; 
		
	}
	
	private String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date);
		return str.replace("-", "/");
	}
}
