package kr.or.tco.att.controller;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.tco.att.service.impl.AttService;
import kr.or.tco.att.vo.WorksttsVO;
import kr.or.tco.cmncd.vo.CmncdVO;
import kr.or.tco.emp.vo.EmpVO;
import oracle.jdbc.proxy.annotation.Post;

@RequestMapping("/att")
@Controller
public class AttController {

	@Autowired AttService attService;
	private static final Logger logger = 
			LoggerFactory.getLogger(AttController.class);
	
	@GetMapping("/attlist")
	public String attdetail() {
		
		return "att/attlist";
	}
	
	@GetMapping("/attdetail")
	public String attlist(Model model, HttpServletRequest request) {
		HttpSession session = request.getSession(false);
		// getAttribute의 리턴값은 object
		String userId = String.valueOf(session.getAttribute("userID"));
		logger.info("userid는:" + userId);
		
		
		EmpVO empVO = attService.binfoselect(userId);
		CmncdVO cmncdVO = attService.sdselect(empVO.getCmncdCd());
		empVO.setOpt(cmncdVO.getCmncdGuNm());
		empVO.setDptopt(cmncdVO.getCmncdNm1());
		empVO.setLelopt(cmncdVO.getCmncdNm2());
		
		model.addAttribute("empVO", empVO);
		
		return "att/attdetail";
	}
	
	DateTimeFormatter dayf = DateTimeFormatter.ofPattern("yy-MM-dd");
	DateTimeFormatter timef = DateTimeFormatter.ofPattern("HH:mm:ss");
	LocalDateTime now = LocalDateTime.now();

	
	// 출근
	@ResponseBody
	@PostMapping("/attin")
	public int attin(HttpServletRequest request) throws ParseException {
		HttpSession session = request.getSession(false);
		String userId = String.valueOf(session.getAttribute("userID"));
		String time = now.format(timef);
		
		logger.info("날것: "+ now);
		logger.info("시간: "+time);
		
		int ck =attService.checkIselect(userId);
		
		logger.info("ck"+ ck);
		
		if(ck<=0) {
		WorksttsVO worksttsVO =  new WorksttsVO();
		worksttsVO.setWorksttsBgngTm(time);
		worksttsVO.setEmpId(userId);
		
		logger.info("vo: "+ worksttsVO);
		int result = attService.inselect(worksttsVO);

		return result;
		}else {
			return 0;
		}
	}
	
	// 퇴근
	@ResponseBody
	@PostMapping("/attout")
	public int attout(HttpServletRequest request) throws ParseException {
		HttpSession session = request.getSession(false);
		String userId = String.valueOf(session.getAttribute("userID"));

		// 퇴근여부
		int ck1 =attService.checkOselect(userId);
		// 출근여부
		int ck2 = attService.checkIselect(userId);
		
		
		
		//퇴근 0 이고 출근 1일때 => 성공
		if(ck1<=0 && ck2>0) {
		WorksttsVO worksttsVO =  new WorksttsVO();
		worksttsVO.setEmpId(userId);
		
		logger.info("OUTvo: "+ worksttsVO);
		
		int result = attService.outselect(userId);
		
		// 출퇴근 시간 계산
		int enbg = attService.enbgselect(userId);
		
		// 지정 근무시간 계산
		int enbgck = attService.CKenbgselect(userId);
		
		// 퇴근시간-출근시간 = N시간
		// 지정퇴근시간-지정출근시간 = M시간

		// IF(N>=M)이면 근무시간은 M시간 INSERT
		// ELSE이면 근무시간은 N시간 INSERT
		
		int result2 ;
		if(enbg>=enbgck) {
			worksttsVO.setWorksttsTm(enbgck);
			result2 = attService.enbgupdate(worksttsVO);
			
		}else {
			worksttsVO.setWorksttsTm(enbg);
			result2 = attService.enbgupdate(worksttsVO);
		}
		logger.info("result2" + result2);
		logger.info("퇴근ck"+ result);
		return result2;
		
		
		// 퇴근 0이고 출근0일때 => 출근해주슈
		}else if(ck1<=0 && ck2<=0) {
			return 2;
		// 퇴근 1이고 출근1일때=>  이미처리
		}else if(ck1>0 && ck2>0) {
			return 3;
		}else {
			return 4;
		}
		
	 
	}
	
}
