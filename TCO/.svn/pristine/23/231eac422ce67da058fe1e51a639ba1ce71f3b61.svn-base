package kr.or.tco.emp.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import kr.or.tco.emp.ArticlePage;
import kr.or.tco.emp.mapper.EmpMapper;
import kr.or.tco.emp.service.impl.EmpService;
import kr.or.tco.emp.vo.AttachFilesVO;
import kr.or.tco.emp.vo.EmpVO;


@RequestMapping("/emp")
@Controller
public class EmpController {

	@Autowired
	EmpService empService;
	
	private static final Logger logger = 
			LoggerFactory.getLogger(EmpController.class);
	
	
	@GetMapping("/empinsert")
	public String getempinsert(Model model) {
	
		model.addAttribute("empVO", new EmpVO());
		return "emp/empinsert";
	}

		
	
	@PostMapping("/empinsert")
	public String postempinsert(EmpVO empVO) {
		
		logger.info("empVo는: "+ empVO);
		
		String cmncdCd = empService.cdselect(empVO);
		logger.info(cmncdCd);
		empVO.setCmncdCd(cmncdCd);
		
		//업로드한 파일 
		MultipartFile[] uploadFile = empVO.getUploadFile();
				
		//파일 저장 경로 설정
		String uploadFolder = 
		"D:\\A_TeachingMaterial\\6.JspSpring\\workspace\\TCO\\src\\main\\webapp\\resources\\upload";
		
		//연/월/일 폴더 생성 시작-------
		File uploadPath = new File(uploadFolder, getFolder());
		logger.info("uploadPath : " + uploadPath);
				
		if(uploadPath.exists()==false) {//해당 경로가 없으면 생성해줘야함
			uploadPath.mkdirs();			
		}
		//연/월/일 폴더 생성 끝-------
		
		
		AttachFilesVO vo = new AttachFilesVO();
	
		
		//이미지 3개를 업로드 한다면 3회 반복
		for(MultipartFile multipartFile : uploadFile) {
			logger.info("-----------");
			logger.info("파일명 : " + multipartFile.getOriginalFilename());
			logger.info("파일크기 : " + multipartFile.getSize());
			
			//각 파일 별로 세팅할 VO 
			
			
			//1) 파일id(기본키데이터), 파일시퀀스번호,파일명과 크기를 세팅
			
			vo.setAtchfileSz(""+multipartFile.getSize());
			vo.setAtchfileNm( multipartFile.getOriginalFilename());
			
			
			
			//-----------UUID 파일명 처리 시작 ----------------------------
			//동일한 이름으로 업로드되면 기존 파일을 지우게 되므로 이를 방지하기 위함
			UUID uuid = UUID.randomUUID();
			
			String uploadFileName = uuid.toString() + "-" + multipartFile.getOriginalFilename();
			// c:\\upload\\gongu03.jpg으로 조립
			// 이렇게 업로드 하겠다라고 설계 uploadFolder -> uploadPath
			// /resources/upload/2022/02/21/asdfsadfsdafsda_test.jpg
			vo.setUploadFileName("/resources/upload/" + getFolder() + "/" + uploadFileName);
			
			empVO.setEmpImg("/resources/upload/" + getFolder() + "/" + uploadFileName);
			
			File saveFile = new File(uploadPath,uploadFileName);
			//-----------UUID 파일명 처리 끝 ----------------------------
			
			try {
				//transferTo() : 물리적으로 파일 업로드가 됨
				multipartFile.transferTo(saveFile);
			
				
				
				
			}catch(Exception e){
				logger.info(e.getMessage());
			}//end catch
		}
		
		
		logger.info("attachFilesVO능?!" + vo);
		
		//attach_files 테이블로 insert
		empService.insertAttachFiles(vo);
				 
				
		logger.info("empVo는2: "+ empVO);
		int result = empService.empinsert(empVO);
		
		if(result>0) { //고객 등록 성공
			
			// 목록으로 이동
			return "redirect:/emp/emplist";
			
		}else {
			return "emp/empinsert";
		}
	}
	
	@GetMapping("/test")
	public String test(Model model) {
		
		model.addAttribute("empVO", new EmpVO());
		return "emp/test";
	}
	
	@PostMapping("/test")
	public String posttest(EmpVO empVO) {
		
		int result = empService.empinsert(empVO);
		
		return "emp/empinsert";
	}
	
	@GetMapping("/emplist")
	public String emplist(Model model, @RequestParam(defaultValue="1") int currentPage
			, @RequestParam(required=false) String keyWord
			, @RequestParam(defaultValue="7",required=false) int size) {	
		
		
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("keyWord", keyWord);
		map.put("currentPage", currentPage);
		map.put("size", size);
		
		//직원 목록
		List<EmpVO> list = this.empService.emplist(map);		
		int total = this.empService.selectCount(map);
		model.addAttribute("list", 
				new ArticlePage(total, currentPage, size, 5, list));
		model.addAttribute("total", total);
		
		model.addAttribute("data", list);
		
		//forwarding
		return "emp/emplist";
	}
	
	@GetMapping("/empdetail")
	public String empdetail(Model model, @RequestParam Map<String, Object> map) {
		EmpVO empVO = new EmpVO();
		empVO.setEmpId((String)map.get("empId"));
		logger.info("before" + empVO.toString());
		
		empVO = empService.empdetail(empVO);
		logger.info(empVO.toString());
		model.addAttribute("data", empVO);
		
		return "emp/empdetail";
	}
	
	//첨부파일을 보관하는 폴더를 연/월/일 계층 형태로 생성하기 위함
		private String getFolder() {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Date date = new Date();
			String str = sdf.format(date);
			return str.replace("-", "/");
		}
	
}
