package kr.or.tco.cal.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.tco.ArticlePage;
import kr.or.tco.cal.service.CalService;
import kr.or.tco.cal.vo.StrgWrhsVO;
import kr.or.tco.cmncd.vo.CmncdVO;
import kr.or.tco.prod.vo.ProdVO;
import kr.or.tco.sls.vo.SlsVO;
import kr.or.tco.cal.vo.CustNtsVO;
import kr.or.tco.cal.vo.PosVO;

//정산 컨트롤러
@RequestMapping("/calculate")
@Controller
public class CalController {
	private static final Logger logger = 
			LoggerFactory.getLogger(CalController.class);
	@Autowired CalService calService;
	/**
	 *  일일 매입 정산
	 *  @return 일일 매입 vo 가 담긴 list 를 리턴.
	 */
	@RequestMapping(value = "/dailyPrc" ,method = RequestMethod.GET)
	public String dailyPrc(Model model
			, @RequestParam(required=false) String brnSelect 	
			, @RequestParam(required=false) String startDay 	
			, @RequestParam(required=false) String endDay) {	
		
		logger.info("brnSelect : " + brnSelect);
		logger.info("startDay : " + startDay);
		logger.info("endDay : " + endDay);
		//<key,value>
		Map<String,Object> map = new HashMap<String, Object>();
		
		map.put("brnSelect", brnSelect);
		map.put("startDay", startDay);
		map.put("endDay", endDay);
//		map.put("currentPage", currentPage);
//		map.put("size", size);
		//고객 전체 인원수
//		int total = this.cusService.getTotal(map);
		//창고 입고 총 횟수
//		int SGWTotal = this.calService.getSGWTotal(map);
		//상품 판매 총 횟수
//		int CNLTotal = this.calService.getCNLTotal(map);
		//창고입고 페이징처리 
//		model.addAttribute("dailyPrc",new ArticlePage(SGWTotal, currentPage, size, 5, dailyPrc));
//		model.addAttribute("SGWTotal", SGWTotal);
		//상품 판매 페이징 처리 
//		model.addAttribute("dailyCustNts",new ArticlePage(CNLTotal, currentPage, size, 5, dailyCustNts));
//		model.addAttribute("CNLTotal", CNLTotal);
		List<StrgWrhsVO>dailyPrc = this.calService.dailyPrc(map);
		List<CustNtsVO>dailyCustNts = this.calService.dailyCustNts(map);
		model.addAttribute("dailyPrc",dailyPrc);
		model.addAttribute("dailyCustNts",dailyCustNts);
		
		logger.info("dailyPrc : " + dailyPrc);
		logger.info("dailyCustNts : " + dailyCustNts);
		
		//forwarding
		return "calculate/dailyPrc";
	}
	
	@ResponseBody
	@RequestMapping(value = "/dailyCalInsert" ,method = RequestMethod.POST)
	public String dailyCalPost(Model model
			, @RequestParam(required=false) String calbrn 	
			, @RequestParam(required=false) int netIncome 	
			, @RequestParam(required=false) int prcsum 	
			, @RequestParam(required=false) int slssum) {	
		logger.info("prcsum : " + prcsum);
		logger.info("prcsum : " + calbrn);
		logger.info("slssum : " + slssum);
		logger.info("netIncome : " + netIncome);
		//<key,value>
		Map<String,Object> map = new HashMap<String, Object>();
		map.put("calbrn", calbrn);
		map.put("netIncome", netIncome);
		map.put("prcsum", prcsum);
		map.put("slssum", slssum);
		int result = this.calService.dailyCalInsert(map);
		model.addAttribute("dailyCalPost",result);
		
		//정상적으로 등록
		if(result > 0) {
			//forward
			return "success";
		}else { //등록 실패
			
			return "fail";
		}
		
	}

	
	@RequestMapping(value = "/pos" ,method = RequestMethod.GET)
	public String pos(Model model 
	
			, @RequestParam(required=false) String brnSelect 	
			, @RequestParam(required=false) String custId 	
			, @RequestParam(required=false) String prodInfoId 	
			, @RequestParam(required=false) String custNtslQty) {	
		
		logger.info("brnSelect : " + brnSelect);
		logger.info("custId : " + custId);
		logger.info("prodInfoId : " + prodInfoId);
		logger.info("custNtslQty : " + custNtslQty);
		//<key,value>
		Map<String,Object> map = new HashMap<String, Object>();
		
		map.put("brnSelect", brnSelect);
		map.put("custId", custId);
		map.put("prodInfoId", prodInfoId);
		map.put("custNtslQty", custNtslQty);
		List<StrgWrhsVO>dailyPrc = this.calService.dailyPrc(map);
		List<CustNtsVO>dailyCustNts = this.calService.dailyCustNts(map);
		model.addAttribute("dailyPrc",dailyPrc);
		model.addAttribute("dailyCustNts",dailyCustNts);
		
		logger.info("dailyPrc : " + dailyPrc);
		logger.info("dailyCustNts : " + dailyCustNts);
		
		//forwarding
		return "calculate/pos";
	}
	
	@RequestMapping(value = "/QRcodemaker" ,method = RequestMethod.GET)
	public String QRcodMaker(Model model ) {
		
		
		//forwarding
		return "calculate/QRcodemaker";
	}
	
	//상품 상세
	@GetMapping("/prodDetail")
	public String detail(Model model, @RequestParam("prodInfoId") String prodInfoId) {
		
		ProdVO prodVO = calService.prodDetail(prodInfoId);
		logger.info("prodVO : " + prodVO);
		
		List<CmncdVO> cmncd2List = calService.cdnm2List(prodInfoId);
		logger.info("cmncd2List : " + cmncd2List);
		
		model.addAttribute("prodVO", prodVO);
		model.addAttribute("cmncd2List", cmncd2List);
		
		//forwarding
		return "calculate/prodDetail";
	}
	
	//상품 목록
	@GetMapping("/prodList")
	public String prodList(Model model, @RequestParam(required=false) String keyWord) {
		logger.info("keyWord : " + keyWord);
		
		//mapper에 상품목록 뽑는 파라미터인 hashMap 생성
		Map<String, String> map = new HashMap<String, String>();
		map.put("keyWord", keyWord);
		
		List<PosVO> prodList = this.calService.prodList(map);
		
		model.addAttribute("prodList", prodList);
		
		//forwarding
		return "calculate/prodList";
	}
	
	
}
