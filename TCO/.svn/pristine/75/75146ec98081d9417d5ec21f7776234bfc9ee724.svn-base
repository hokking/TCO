<%@ page language="java" contentType="text/html; charset=UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt"%>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions"%>
<%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags"%>
<script type="text/javascript" src="/resources/js/jquery-3.6.0.js"></script>
<html>
<head>
<meta charset="utf-8">
<title>:: jsQR 테스트 ::</title>
<script type="text/javascript" src="/resources/js/jsQR.js"></script>
<style type="text/css">
main {
	width: 100%;
	height: 100%;
	text-align: center;
}

main>div {
	float: left;
	width: 1%;
	height: 98%;
}

main>div:first-child {
	width: 49%;
}

main>div:last-child {
	background-color: #D3D3D3;
	width: 49%;
}

div#output {
	background-color: #BDBEBD;
	padding-left: 10px;
	padding-right: 10px;
	padding-top: 10px;
	padding-bottom: 10px;
}

div#frame {
	border: 2px solid #005666;
	background-color: #FFFFFF;
	margin-left: 10px;
	margin-right: 10px;
	padding-left: 8px;
	padding-right: 8px;
	padding-top: 8px;
	padding-bottom: 8px;
	
	width: 50%;
}

div#outputLayer {
	text-align: left;
}

canvas {
	width: 100%;
}
.container {
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}
.calculator {
  background-color: #06597a;
  width: 350px;
  height: 500px;
  border-radius: 10px;
  padding: 10px 20px;
  border: solid 6px #ffffff;
}
.calculator__display--for-advanced {
  background-color: #f09393;
  height: 100px;
  width: 100%;
  border-radius: 10px;
  font-size: 30px;
  text-align: center;
  vertical-align: middle;
  padding: 25px 15px;
  overflow: hidden;
  overflow-wrap: break-word;
}
.calculator__buttons {
  background-color: #ffffff;
  width: 100%;
  height: 330px;
  margin-top: 10px;
  padding: 10px;
  border-radius: 10px;
  font-size: 25px;
}
.clear__and__enter {
  text-align: center;
  height: 50px;
  margin: 10px;
  border-radius: 10px;
  background-color: #ffffff;
}
.clear__and__enter > button {
  border-radius: 10px;
  width: 125px;
  height: 50px;
  margin: 0px 0px;
  background-color: #f09393; 
  cursor: pointer;
  outline: none;
  border: 0px solid #30bb98;
}
.button__row {
  border-radius: 10px;
  text-align: center;
  height: 50px;
  margin: 10px;
  background-color: #ffffff;
}
.button__row > button {
  width: 60px;
  height: 50px;
  border-radius: 10px;
  cursor: pointer;
  outline: none;
  background-color: #bdb2b2;
}
.button__row > .operator {
  color: #ffffff;
  background-color: #313132;
}
.button__row > .double {
  width: 125px;
}
.button__row > .isPressed {
  background-color: #00da75;
}

</style>

<script type="text/javascript">
const calculator = document.querySelector('.calculator'); // calculator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있음.
const buttons = calculator.querySelector('.calculator__buttons'); // calculator__keys 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있음.
const operator = document.querySelector('.calculator__operator'); // calculator__operator 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있음.
const display = document.querySelector('.calculator__display--for-advanced'); // calculator__display 엘리먼트와, 그 자식 엘리먼트의 정보를 모두 담고 있음.

let firstNum = '';
let operatorForAdvanced = '';
let previousKey = '';
let previousNum = '';


function calculate(n1, operator, n2) {
	  let result = 0;
	  if(operator === '+') {
	    result = Number(n1) + Number(n2); // '+'버튼을 눌렀을 때
	  }
	  else if(operator === '-') {
	     result = Number(n1) - Number(n2); // '-'버튼을 눌렀을 때
	  }
	  else if(operator === '*') {
	     result = Number(n1) * Number(n2); // '*'버튼을 눌렀을 때
	  }
	  if(operator === '/') {
	     result = Number(n1) / Number(n2); // '/'버튼을 눌렀을 때
	  }
	  return String(result);
	}
	

buttons.addEventListener('click', function (event) {
	  const target = event.target; // 클릭된 HTML 엘리먼트의 정보가 저장되어 있음.
	  const action = target.classList[0]; // 클릭된 HTML 엘리먼트에 클레스 정보를 가져옴.
	  const buttonContent = target.textContent; // 클릭된 HTML 엘리먼트의 텍스트 정보를 가져옴.

	  if (target.matches('button')) {
	    if (action === 'number') { //클릭된 HTML 엘리먼트의 클래스 네임이 'number'라면
	      if (display.textContent === '0' && operatorForAdvanced === '') {
	        display.textContent = buttonContent;
	        firstNum = display.textContent // 첫번째 숫자를 변수에 할당
	      } // 기존 계산기 숫자가 0이고, 오퍼레이터 버튼이 안눌린 상태의 분기
	      else if (display.textContent !== '0' && operatorForAdvanced === ''){
	        display.textContent = display.textContent + buttonContent;
	       // textContent는 문자열이기 때문에 기존 계산기에서 보여지는 숫자에 +연산자로 구현 
	        firstNum = display.textContent ;
	      } // 기존 계산기 숫자가 0이 아니고, 오퍼레이터 버튼이 안눌린 상태의 분기
	        // ex) 15를 누르기 위해 1을 누른 상태의 분기(두자리 연속 누르기 위한 코드)
	      else if (display.textContent !== '0' && operatorForAdvanced !== '') {
	        if(previousKey === operatorForAdvanced) {
	          display.textContent = buttonContent;
	          previousKey = display.textContent; 
	          // 직전키를 변수에 할당 (직전키가 오퍼레이터냐 숫자냐에 따라 계산기의 다양한 기능을 구현하기 위함)
	          previousNum = display.textContent; // 직전 숫자를 변수에 할당
	        } // 기존 계산기 숫자가 0이 아니고, 오퍼레이터 버튼이 눌린 상태의 분기
	          // ex) 15+7을 하기 위해 15와 +를 누른 상태(두번째 숫자를 누르기 위한 코드)
	        else if(previousKey !== operatorForAdvanced) {
	          display.textContent = display.textContent + buttonContent;
	          previousNum = display.textContent;
	        } // ex) 15+17을 하기 위해 15와 +, 1을 누른 상태(17을 완성하기 위한 코드)
	      }    
	    }
	    
	    if (action === 'operator') { // //클릭된 HTML 엘리먼트의 클래스 네임이 'operator'일때 분기
	      operatorForAdvanced = buttonContent; // 오퍼레이터 누를 때 누른 텍스트 정보 할당
	      previousKey = operatorForAdvanced; // 직전키에 오퍼레이터 텍스트 정보 할당
	    }

	    if (action === 'clear') { // AC(초기화) 버튼을 누를 때 분기
	      display.textContent = '0';
	      firstNum = '';
	      previousNum = '';
	      operatorForAdvanced = '';
	      previousKey = '';
	    }

	    if (action === 'calculate') { // Enter(계산) 버튼을 누를 때
	      if(firstNum !== '' && operatorForAdvanced === '') {
	        display.textContent = firstNum;
	      }
	      else if(firstNum !== '' && previousNum === '') {
	        display.textContent = calculate(display.textContent, operatorForAdvanced, display.textContent)
	      } // 기존에 작성했던 calculate 함수를 이용하여 계산 상황에 따른 전달인자와 함께 호출
	      else if(previousKey === display.textContent){
	        display.textContent = calculate(firstNum, operatorForAdvanced, previousNum)
	        //   if(operatorForAdvanced === '+') {
	        //   display.textContent = String(Number(firstNum) + Number(previousNum));
	        // } else if(operatorForAdvanced === '-') {
	        //   display.textContent = String(Number(firstNum) - Number(previousNum));
	        // } else if(operatorForAdvanced === '*') {
	        //   display.textContent = String(Number(firstNum) * Number(previousNum));
	        // } else if(operatorForAdvanced === '/') {
	        //   display.textContent = String(Number(firstNum) / Number(previousNum));      
	        // } // 기존에 작성했던 하드코딩..!       
	       } 
	       else if(previousKey !== display.textContent && previousNum !== '') {
	        display.textContent = calculate(display.textContent, operatorForAdvanced, previousNum)
	       }   
	       else if(previousKey !== display.textContent && previousNum === '') {
	        display.textContent = firstNum;
	       }
	     }
	   }
	});

</script>

</head>

<body>

	<main>
		<div style="float: right;">
			<h4>스캔</h4>
			<div id="frame" style="text-align: center;">
				<div id="loadingMessage">
					🎥 비디오 스트림에 액세스 할 수 없습니다<br />웹캠이 활성화되어 있는지 확인하십시오
				</div>
				<canvas id="canvas"></canvas>
			</div>
		</div>
	</main>
		<div>&nbsp;</div>
		<div id="test">
			<h1>QR 코드 리더</h1>
			<div id="output">
				<div id="outputMessage">QR코드를 카메라에 노출시켜 주세요</div>
				<div id="outputLayer">
					<span id="outputData"></span>
				</div>
			</div>
		</div>
		
		 <div class="container">
      <div class="calculator">
        <div class="calculator__display--for-advanced">0</div>
        <div class="calculator__buttons">
          <div class="clear__and__enter">
            <button class="clear">AC</button>
            <button class="calculate">Enter</button>
          </div>
          <div class="button__row">
            <button class="number">7</button>
            <button class="number">8</button>
            <button class="number">9</button>
            <button class="operator">+</button>
          </div>
          <div class="button__row">
            <button class="number">4</button>
            <button class="number">5</button>
            <button class="number">6</button>
            <button class="operator">-</button>
          </div>
          <div class="button__row">
            <button class="number">1</button>
            <button class="number">2</button>
            <button class="number">3</button>
            <button class="operator">*</button>
          </div>
          <div class="button__row">
            <button class="number double">0</button>
            <button class="decimal">.</button>
            <button class="operator">/</button>
          </div>
        </div>
      </div>
    </div>
		
		
		
</body>
</html>
<script type="text/javascript">
	document.addEventListener("DOMContentLoaded", function() {

		var video = document.createElement("video");
		var canvasElement = document.getElementById("canvas");
		var canvas = canvasElement.getContext("2d");
		var loadingMessage = document.getElementById("loadingMessage");
		var outputContainer = document.getElementById("output");
		var outputMessage = document.getElementById("outputMessage");
		var outputData = document.getElementById("outputData");

		function drawLine(begin, end, color) {

			canvas.beginPath();
			canvas.moveTo(begin.x, begin.y);
			canvas.lineTo(end.x, end.y);
			canvas.lineWidth = 4;
			canvas.strokeStyle = color;
			canvas.stroke();

		}

		// 카메라 사용시

		navigator.mediaDevices.getUserMedia({
			video : {
				facingMode : "environment"
			}
		}).then(function(stream) {
			video.srcObject = stream;
			video.setAttribute("playsinline", true); // iOS 사용시 전체 화면을 사용하지 않음을 전달
			video.play();
			requestAnimationFrame(tick);

		});

		function tick() {

			loadingMessage.innerText = "⌛ 스캔 기능을 활성화 중입니다."

			if (video.readyState === video.HAVE_ENOUGH_DATA) {

				loadingMessage.hidden = true;
				canvasElement.hidden = false;
				outputContainer.hidden = false;

				// 읽어들이는 비디오 화면의 크기

				canvasElement.height = video.videoHeight;
				canvasElement.width = video.videoWidth;

				canvas.drawImage(video, 0, 0, canvasElement.width,canvasElement.height);
				var imageData = canvas.getImageData(0, 0, canvasElement.width,canvasElement.height);
				var code = jsQR(imageData.data, imageData.width,imageData.height, {

							inversionAttempts : "dontInvert",

						});

				// QR코드 인식에 성공한 경우

				if (code) {

					// 인식한 QR코드의 영역을 감싸는 사용자에게 보여지는 테두리 생성

					drawLine(code.location.topLeftCorner,
							code.location.topRightCorner, "#FF0000");

					drawLine(code.location.topRightCorner,
							code.location.bottomRightCorner, "#FF0000");

					drawLine(code.location.bottomRightCorner,
							code.location.bottomLeftCorner, "#FF0000");
					drawLine(code.location.bottomLeftCorner,
							code.location.topLeftCorner, "#FF0000");

					outputMessage.hidden = true;
					outputData.parentElement.hidden = false;

					// QR코드 메시지 출력

					outputData.innerHTML = code.data;
					
					const pos = code.data
					const arr = pos.split(",");

					alert("첫째"+arr[0] +"둘째"+ arr[1] +"셋째"+ arr[2])
					
					 session.setAttribute("prodInfoId", arr[0]);
					 session.setAttribute("prodInfoNm", arr[1]);
					 session.setAttribute("prodInfoNtslAmt", arr[2]);

					alert(session.getAttribute(prodInfoId))

					// return을 써서 함수를 빠져나가면 QR코드 프로그램이 종료된다.
					// return;

				}

				// QR코드 인식에 실패한 경우 

				else {

					outputMessage.hidden = false;

					outputData.parentElement.hidden = true;
				}
			}
			requestAnimationFrame(tick);
		}
	});
</script>


